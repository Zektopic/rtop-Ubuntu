name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]  # Only Linux build remains

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Build cpu_monitor
      run: |
        cd cpu_monitor
        cargo build --release

    - name: Set up Qt for Linux
      run: |
        sudo apt-get update
        sudo apt-get install -y qtbase5-dev qt5-qmake qtchooser qtbase5-dev-tools

    - name: Build rtop
      run: |
        cd Qt5
        qmake
        make
      shell: bash

    - name: Package binaries
      run: |
        mkdir -p release
        cp Qt5/rtop release/
        cp cpu_monitor/target/release/cpu_monitor release/
        tar -czvf rtop-${{ matrix.os }}.tar.gz ./release/*
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rtop-${{ matrix.os }}
        path: rtop-${{ matrix.os }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Release ${{ steps.get_tag.outputs.TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              asset_path=$(find "$dir" -name "rtop-*.tar.gz" -o -name "rtop-*.zip")
              asset_name=$(basename "$asset_path" | sed 's/-[a-z]*-latest//')
              gh release upload ${{ steps.get_tag.outputs.TAG }} "$asset_path" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ github.token }}
